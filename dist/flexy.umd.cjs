(function(f,V){typeof exports=="object"&&typeof module<"u"?V(exports):typeof define=="function"&&define.amd?define(["exports"],V):(f=typeof globalThis<"u"?globalThis:f||self,V(f.flexy={}))})(this,function(f){"use strict";function V(t,e){const o=e.getAttribute("position"),n=new t.Box3;n.center=new t.Vector3;for(let r=0;r<o.count;r++){const a=new t.Vector3;a.fromBufferAttribute(o,r),n.expandByPoint(a);const d=o[r],y=o[r+1],s=o[r+2];n.center.add(new t.Vector3(d,y,s))}return n.center.divideScalar(o.count/3),n}const C=function({THREE:t,curve:e,quaternion:o,orientation:n,bufferGeometry:r,axis:a,scene:d}){const y=V(t,r),s=r.attributes.position.array;for(let l=0;l<s.length;l+=3){const i=parseFloat(s[l]),m=parseFloat(s[l+1]),c=parseFloat(s[l+2]);if(a==="x"){const x=(i-y.min.x)/(y.max.x-y.min.x),w=e.getPointAt(x),p=e.getTangent(x),g=(n||new t.Vector3(0,0,1).applyQuaternion(o).normalize().multiplyScalar(1e6)).clone().cross(p.clone()).normalize(),h=new t.Quaternion().setFromAxisAngle(p.clone(),Math.atan2(c,m));g.applyQuaternion(h);const z=g.clone().setLength(new t.Vector3(0,m,c).length()),u=w.clone().add(z);s[l]=u.x,s[l+1]=u.y,s[l+2]=u.z}else if(a==="z"){const x=(c-y.min.z)/(y.max.z-y.min.z),w=e.getPointAt(x),p=e.getTangent(x),g=(n||new t.Vector3(1,0,0).applyQuaternion(o).normalize().multiplyScalar(1e6)).clone().cross(p.clone()).normalize(),h=new t.Quaternion().setFromAxisAngle(p.clone(),Math.atan2(m,i)+Math.PI/2);g.applyQuaternion(h);const z=g.clone().setLength(new t.Vector3(i,m,0).length()),u=w.clone().add(z);s[l]=u.x,s[l+1]=u.y,s[l+2]=u.z}else if(a==="y"){const x=(m-y.min.y)/(y.max.y-y.min.y),w=e.getPointAt(x),p=e.getTangent(x),g=(n.normalize().multiplyScalar(1e6)||new t.Vector3(0,1,0).applyQuaternion(o).normalize().multiplyScalar(1e6)).clone().cross(p.clone()).normalize(),h=new t.Quaternion().setFromAxisAngle(p.clone(),Math.atan2(i,c));g.applyQuaternion(h);const z=g.clone().setLength(new t.Vector3(i,0,c).length()),u=w.clone().add(z);s[l]=u.x,s[l+1]=u.y,s[l+2]=u.z}}r.attributes.position.needsUpdate=!0},N=function({THREE:t,reflectionMap:e,obj:o,scene:n}){const r=new t.Vector3(e.collisionPlane.A.x,e.collisionPlane.A.y,e.collisionPlane.A.z),a=new t.Vector3(e.collisionPlane.B.x,e.collisionPlane.B.y,e.collisionPlane.B.z),d=new t.Vector3(e.collisionPlane.C.x,e.collisionPlane.C.y,e.collisionPlane.C.z),y=new t.Vector3().subVectors(a,r),s=new t.Vector3().subVectors(d,r),l=new t.Vector3().crossVectors(y,s).normalize(),i=new t.Plane;i.setFromNormalAndCoplanarPoint(l,r);const m=o.geometry.attributes.position.array;for(let c=0;c<m.length;c+=3){const x=parseFloat(m[c]),w=parseFloat(m[c+1]),p=parseFloat(m[c+2]),A=new t.Vector3(x,w,p);A.applyMatrix4(o.matrixWorld);const g=A.clone().sub(r).dot(i.normal),h=i.normal.clone().multiplyScalar(g/i.normal.lengthSq()),z=A.clone().sub(h),u=Q(z.x,z.y,z.z,e.resolution),B=e.data[u];if(!B){console.error("asdads");continue}const D=new t.Vector3(B.normal.x,B.normal.y,B.normal.z),P=new t.Object3D;P.lookAt(D);const b=new t.Vector3(x,w,p).clone().applyQuaternion(P.quaternion);m[c]=b.x,m[c+1]=b.y,m[c+2]=b.z}o.geometry.attributes.position.needsUpdate=!0},S=function({THREE:t,surface:e,resolution:o,collisionPlane:n,scene:r}){const a={};for(let d=0;d<=o;d++){const y=F(t,n.A,n.D,o)[d],s=F(t,n.B,n.C,o)[d];F(t,y,s,o).forEach(i=>{const c=new t.Raycaster(i,n.direction.normalize()).intersectObject(e);c.length>0&&(a[Q(i.x,i.y,i.z,o)]={normal:{x:c[0].face.normal.x,y:c[0].face.normal.y,z:c[0].face.normal.z},point:{x:c[0].point.x,y:c[0].point.y,z:c[0].point.z}})})}return{data:a,collisionPlane:{A:{x:n.A.x,y:n.A.y,z:n.A.z},B:{x:n.B.x,y:n.B.y,z:n.B.z},C:{x:n.C.x,y:n.C.y,z:n.C.z},D:{x:n.D.x,y:n.D.y,z:n.D.z},direction:{x:n.direction.x,y:n.direction.y,z:n.direction.z}},resolution:o}};function Q(t,e,o,n){function r(i,m){return Math.round(i/m)*m}function a(i){return i==="-0.0"?"0.0":i}const d=1/n,y=a(r(t,d).toFixed(1)),s=a(r(e,d).toFixed(1)),l=a(r(o,d).toFixed(1));return`${y}^${s}^${l}`}function F(t,e,o,n){const r=[];for(let a=0;a<=n;a++){const d=new t.Vector3(e.x+(o.x-e.x)*(a/n),e.y+(o.y-e.y)*(a/n),e.z+(o.z-e.z)*(a/n));r.push(d)}return r}f.bend=C,f.getReflectionMap=S,f.wrap=N,Object.defineProperty(f,Symbol.toStringTag,{value:"Module"})});
